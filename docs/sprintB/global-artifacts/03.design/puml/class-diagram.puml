@startuml
skinparam classAttributeIconSize 0
skinparam linetype polyline


class AuthenticationRepository{
    - authenticationFacade:AuthFacade
    + doLogin(email, pwd)
    + doLogout()
    + getCurrentUserSession()
    + addUserRole(id, description)
    + addUserWithRole(name, email, pwd, roleId)
}

class AuthFacade{
    ...
    getCurrentUserSession()
}


class Repositories{
    - instance:Repositories
    - skillRepository:JobRepository
    - jobRepository:JobRepository
    - employeeRepository:EmployeeRepository
    - vehicleRepository:VehicleRepository
    - authenticationRepository:AuthenticationRepository


    + getInstance()
    + getSkillRepository()
    + getJobRepository()
    + getVehicleRepository()
    + getEmployeeRepository()
    + getAuthenticationRepository()
}

'------------------         UI             ----------------------

class MainMenuUI{
    run()
}

class AuthenticationUI{
    +run()
    -getMenuItemForRoles()
    -doLogin()
    -logout()
}

class HRMUI{
    run()
}

class VFMUI{
    run()
}





class CreateSkillUI {
    +run()
    +requestData(skillName, skillDescription)
    +submitData()
}

class CreateJobUI {
    +run()
    +requestData(jobName, jobDescription)
    +submitData()
}

class CreateVehicleUI {
    +run()
    +requestData(skillName, skillDescription)
    +submitData()
}


'------------------         CONTROLLERS             ----------------------

class CreateSkillController {
    - getEmployeeFromSession()
    + CreateSkillController(skillRepository)
    + validateSkillData(skillName, skillDescription)
    + addSkillToRepo(newSkill)

}

class CreateJobController {
    -getEmployeeFromSession()
    + CreateJobController(jobRepository)
    + createJob(jobName, jobDescription)
}


class CreateVehicleController {
    -getEmployeeFromSession()
    + CreateVehicleController(vehicleRepository)
    + createVehicle(brand, model, type, tareWeight, grossWeight,\n currentKm, registerDate,acquisitionDate, maintenanceFrequencyInKm,\n plateNumber, numOfPassengers, numOfDoors, fuelType,\n trailerMachinesAble)
}


'------------------         REPOS             ----------------------

class SkillRepository{
    + createSkill(skillName, skillDescription, creator)
    + validateSkill(newSkill)
    + addSkill(newSkill)
}


class JobRepository{
    + createJob(jobName, jobDescription, creator)
    + validateJob(newJob)
    + addJob(newJob)
}


class VehicleRepository{
    + createVehicle(brand, model, type, tareWeight, grossWeight,\n currentKm, registerDate,acquisitionDate, maintenanceFrequencyInKm,\n plateNumber, numOfPassengers, numOfDoors, fuelType,\n trailerMachinesAble)
    + validateVehicle(newVehicle)
    + addVehicle(newVehicle)
}


'------------------         MODELS             ----------------------

class Skill {
    -skillName:String
    -skillDescription:String
    -creator:Employee

    +Skill(skillName, skillDescription, creator)
    +validateSkillData(skillName, skillDescription, creator)
}


class Job {
    -jobName:String
    -jobDescription:String
    -creator:Employee

    +Job(jobName, jobDescription, creator)
    +validateJobData(jobName, jobDescription, creator)
}



class Employee{
    -name:String
    -birthdate:Date
    -admissionDate:Date
    -address
    -mobileContact:String
    -emailContact:String
    -IDdocType:String
    -IDnumber:String
    -taxNumber:String

    +Employee (String nome,LocalDate dateOfBirth,\nLocalDate admissionDate, String morada, int telemovel,\nString email, String idDocType, int docTypeNumber,\nint taxPayerIdNumber, String role, Job job)
}


class Vehicle{
    -brand:String
    -model:String
    -vehicleType:String
    -tareWeight:int
    -grossWeight:int
    -currentKm:int
    -registerDate:Date
    -acquisitionDate:Date
    -maintenanceFrequencyInKm:int
    -plateNumber:String
    -numOfPassengers:int
    -numOfDoors:int
    -fuelType:String
    -trailerMachinesAble:boolean
    -creator:Employee

    + Vehicle(brand, model, type, tareWeight, grossWeight,\n currentKm, registerDate,acquisitionDate, maintenanceFrequencyInKm,\n plateNumber, numOfPassengers, numOfDoors, fuelType,\n trailerMachinesAble, creator)
}















AuthenticationRepository --> AuthFacade : getCurrentUserSession


MainMenuUI ..> AuthenticationUI: creates


AuthenticationUI ..> HRMUI : creates
AuthenticationUI ..> VFMUI : creates


HRMUI ..> CreateSkillUI : creates
HRMUI ..> CreateJobUI : creates


VFMUI ..> CreateVehicleUI : creates


CreateSkillController --> AuthenticationRepository : getCurretUserSession
CreateJobController --> AuthenticationRepository : getCurretUserSession
CreateVehicleController --> AuthenticationRepository : getCurrentUserSession


CreateJobController "1" --> "1" Repositories : getInstance
CreateSkillController "1" --> "1" Repositories : getInstance
CreateVehicleController "1" --> "1" Repositories : getInstance


CreateJobUI ..> CreateJobController
CreateSkillUI ..> CreateSkillController
CreateVehicleUI ..> CreateVehicleController


Repositories "1" ..> "1" SkillRepository : create
Repositories "1" ..> "1" JobRepository : create
Repositories "1" ..> "1" VehicleRepository : create



CreateSkillController --> SkillRepository : createSkill
CreateJobController --> JobRepository : createJob
CreateVehicleController --> VehicleRepository : createVehicle


SkillRepository ..> Skill : createSkill
JobRepository ..> Job : createJob
VehicleRepository ..> Vehicle : createVehicle


Employee "1" --> "1" Job : has a
Employee "1" --> "0..*" Skill : has a set of




@enduml