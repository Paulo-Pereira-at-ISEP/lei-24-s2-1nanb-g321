@startuml
skinparam classAttributeIconSize 0
skinparam linetype polyline


class ApplicationSession
{
  +static getInstance()
  +getCurrentSession()
}

class UserSession
{
  +isLoggedInWithRole(USER_ROLE)
}

class "{NameOfUC}Controller" {
    + {NameOfUC}Controller()
    + methodX(...)
}

class "{NameOfUC}UI" {
}




class CreateJobUI {
    +run()
    +requestData(jobName, jobDescription)
}





class CreateSkillUI {
    +run()
    +requestData(skillName, skillDescription)
}


class CreateSkillController {
    + CreateSkillController(possibly skillRepository)
    + validateSkillData(skillName, skillDescription)

}

class CreateJobController {
    + CreateJobController(possibly skillRepository)
    + validateJobData(jobName, jobDescription)

}


class Employee{
    -name:String
    -birthdate:Date
    -admissionDate:Date
    -address
    -mobileContact:String
    -emailContact:String
    -IDdocType:String
    -IDnumber:String
    -taxNumber:String
    -job:Job

}

class Collaborator {
    -listOfSkills:List<Job>
}

class Organization {
    +createSkill(skillName, skillDescription)
    +createJob(jobName, jobDescription)
}


class Skill {
    -skillName:String
    -skillDescription:String

    +Skill(skillName, skillDescription)
    +validateSkillData(skillName, skillDescription)
}


class Job {
    -jobName:String
    -jobDescription:String

    +Job(jobName, jobDescription)
    +validateJobData(jobName, jobDescription)
}


CreateJobUI .> CreateJobController
CreateSkillUI .> CreateSkillController

CreateJobController -->  Organization : createJob
CreateSkillController --->  Organization : createSkill

Collaborator "1" ---> "*" Skill : has a set of
Employee "1" ---> "1" Job : has a

Organization .> Skill : createSkill
Organization .> Job : createJob

Collaborator --> Employee : is a



"{NameOfUC}UI" ..> "{NameOfUC}Controller"
"{NameOfUC}Controller" ..> ApplicationSession
"{NameOfUC}Controller" ..> UserSession

@enduml