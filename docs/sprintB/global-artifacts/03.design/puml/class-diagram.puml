@startuml
skinparam classAttributeIconSize 0
skinparam linetype polyline


class ApplicationSession
{
  +static getInstance()
  +getCurrentSession()
}

class UserSession
{
  +isLoggedInWithRole(USER_ROLE)
}

class "{NameOfUC}Controller" {
    + {NameOfUC}Controller()
    + methodX(...)
}

class "{NameOfUC}UI" {
}



class CreateJobController {
    + CreateJobController(jobRepository)
    + validateJobData(jobName, jobDescription)
    + addJobToRepo(newJob)

}


class CreateJobUI {
    +run()
    +requestData(jobName, jobDescription)
}



class Employee{
    -name:String
    -birthdate:Date
    -admissionDate:Date
    -address
    -mobileContact:String
    -emailContact:String
    -IDdocType:String
    -IDnumber:String
    -taxNumber:String

    +Employee (String nome,LocalDate dateOfBirth,\nLocalDate admissionDate, String morada, int telemovel,\nString email, String idDocType, int docTypeNumber,\nint taxPayerIdNumber, String role, Job job)
}

class Repositories{
    - instance:Repositories
    - skillRepository:JobRepository
    - jobRepository:JobRepository
    - employeeRepository:EmployeeRepository


    + getInstance()
    + getSkillRepository()
    + getJobRepository()
    + getEmployeeRepository()
}

class JobRepository{
    + createJob(jobName, jobDescription)
    + validateJob(newJob)
    + addJob(newJob)
}

class Job {
    -jobName:String
    -jobDescription:String

    +Job(jobName, jobDescription)
    +validateJobData(jobName, jobDescription)
}


class CreateSkillController {
    + CreateSkillController(skillRepository)
    + validateSkillData(skillName, skillDescription)
    + addSkillToRepo(newSkill)

}


class CreateSkillUI {
    +run()
    +requestData(skillName, skillDescription)
}



class SkillRepository{
    + createSkill(skillName, skillDescription)
    + validateSkill(newSkill)
    + addSkill(newSkill)
}

class Skill {
    -skillName:String
    -skillDescription:String

    +Skill(skillName, skillDescription)
    +validateSkillData(skillName, skillDescription)
}



CreateJobUI ..> CreateJobController

CreateJobController -->  Repositories : getInstance
Repositories ..> JobRepository : create
JobRepository ..> Job : createJob
Employee --> Job : has a


CreateSkillUI ..> CreateSkillController

CreateSkillController -->  Repositories : getInstance
Repositories ..> SkillRepository : create
SkillRepository ..> Skill : createSkill
Employee --> Skill : has a set of


"{NameOfUC}UI" ..> "{NameOfUC}Controller"
"{NameOfUC}Controller" ..> ApplicationSession
"{NameOfUC}Controller" ..> UserSession

@enduml